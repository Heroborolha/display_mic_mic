
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000042e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  000004d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a88  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000752  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048b  00000000  00000000  00001776  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001c04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000466  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000549  00000000  00000000  000021a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000026eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_18>
  4c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 01 	call	0x398	; 0x398 <main>
  9e:	0c 94 15 02 	jmp	0x42a	; 0x42a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <shiftOut>:

// Função para enviar dados para os registradores de deslocamento
void shiftOut(uint8_t valor) {
	uint8_t i;

	for (i = 0; i < 8; i++) {
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	2a c0       	rjmp	.+84     	; 0xfe <shiftOut+0x58>
		if (valor & (1 << i))
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	09 2e       	mov	r0, r25
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <shiftOut+0x10>
  b2:	35 95       	asr	r19
  b4:	27 95       	ror	r18
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <shiftOut+0xc>
  ba:	20 ff       	sbrs	r18, 0
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <shiftOut+0x20>
		PORTB |= (1 << DATA_PIN);
  be:	25 b1       	in	r18, 0x05	; 5
  c0:	21 60       	ori	r18, 0x01	; 1
  c2:	25 b9       	out	0x05, r18	; 5
  c4:	03 c0       	rjmp	.+6      	; 0xcc <shiftOut+0x26>
		else
		PORTB &= ~(1 << DATA_PIN);
  c6:	25 b1       	in	r18, 0x05	; 5
  c8:	2e 7f       	andi	r18, 0xFE	; 254
  ca:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	e7 ec       	ldi	r30, 0xC7	; 199
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <shiftOut+0x2a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <shiftOut+0x30>
  d6:	00 00       	nop
		
		_delay_us(100);
		PORTB |= (1 << CLOCK_PIN);
  d8:	25 b1       	in	r18, 0x05	; 5
  da:	24 60       	ori	r18, 0x04	; 4
  dc:	25 b9       	out	0x05, r18	; 5
  de:	e7 ec       	ldi	r30, 0xC7	; 199
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <shiftOut+0x3c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <shiftOut+0x42>
  e8:	00 00       	nop
		_delay_us(100);
		PORTB &= ~(1 << CLOCK_PIN);
  ea:	25 b1       	in	r18, 0x05	; 5
  ec:	2b 7f       	andi	r18, 0xFB	; 251
  ee:	25 b9       	out	0x05, r18	; 5
  f0:	e7 ec       	ldi	r30, 0xC7	; 199
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <shiftOut+0x4e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <shiftOut+0x54>
  fa:	00 00       	nop

// Função para enviar dados para os registradores de deslocamento
void shiftOut(uint8_t valor) {
	uint8_t i;

	for (i = 0; i < 8; i++) {
  fc:	9f 5f       	subi	r25, 0xFF	; 255
  fe:	98 30       	cpi	r25, 0x08	; 8
 100:	a0 f2       	brcs	.-88     	; 0xaa <shiftOut+0x4>
		PORTB |= (1 << CLOCK_PIN);
		_delay_us(100);
		PORTB &= ~(1 << CLOCK_PIN);
		_delay_us(100);
	}
	PORTB &= ~(1 << DATA_PIN);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	85 b9       	out	0x05, r24	; 5
 108:	08 95       	ret

0000010a <display_Num>:
}

void display_Num(uint8_t numero) {
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	2a 97       	sbiw	r28, 0x0a	; 10
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
	 // Tabela para exibir os dígitos de 0 a 9
	const uint8_t Tabela[] = { // Valores investidos do display de  7 segmentos anodo comum, pois o registrador de deslocamento envia do mais significativo pro menos
 11e:	9a e0       	ldi	r25, 0x0A	; 10
 120:	e6 e0       	ldi	r30, 0x06	; 6
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	de 01       	movw	r26, r28
 126:	11 96       	adiw	r26, 0x01	; 1
 128:	01 90       	ld	r0, Z+
 12a:	0d 92       	st	X+, r0
 12c:	9a 95       	dec	r25
 12e:	e1 f7       	brne	.-8      	; 0x128 <display_Num+0x1e>
		0b00011111, // 7
		0b00000001, // 8
		0b00001001  // 9
	};
	
	shiftOut(Tabela[numero]); // Carrega os numeros para função do registrador de deslocamento para poder enviar-los
 130:	e1 e0       	ldi	r30, 0x01	; 1
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ec 0f       	add	r30, r28
 136:	fd 1f       	adc	r31, r29
 138:	e8 0f       	add	r30, r24
 13a:	f1 1d       	adc	r31, r1
 13c:	80 81       	ld	r24, Z
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <shiftOut>
 142:	87 ec       	ldi	r24, 0xC7	; 199
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <display_Num+0x3c>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <display_Num+0x42>
 14c:	00 00       	nop
	
	_delay_us(100);
	PORTB |= (1 << LATCH_PIN);
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	82 60       	ori	r24, 0x02	; 2
 152:	85 b9       	out	0x05, r24	; 5
 154:	87 ec       	ldi	r24, 0xC7	; 199
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <display_Num+0x4e>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <display_Num+0x54>
 15e:	00 00       	nop
	_delay_us(100);
	PORTB &= ~(1 << LATCH_PIN);
 160:	85 b1       	in	r24, 0x05	; 5
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	85 b9       	out	0x05, r24	; 5
 166:	87 ec       	ldi	r24, 0xC7	; 199
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <display_Num+0x60>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <display_Num+0x66>
 170:	00 00       	nop
	_delay_us(100);
}
 172:	2a 96       	adiw	r28, 0x0a	; 10
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	de bf       	out	0x3e, r29	; 62
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	cd bf       	out	0x3d, r28	; 61
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <Tempo_Display>:

void Tempo_Display(uint16_t tempo) {// Divide em cada tempo e salva com seus respectivos digitos
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	8c 01       	movw	r16, r24
	uint8_t decimos = tempo / 100;
 18e:	9c 01       	movw	r18, r24
 190:	36 95       	lsr	r19
 192:	27 95       	ror	r18
 194:	36 95       	lsr	r19
 196:	27 95       	ror	r18
 198:	ab e7       	ldi	r26, 0x7B	; 123
 19a:	b4 e1       	ldi	r27, 0x14	; 20
 19c:	0e 94 06 02 	call	0x40c	; 0x40c <__umulhisi3>
 1a0:	fc 01       	movw	r30, r24
 1a2:	f6 95       	lsr	r31
 1a4:	e7 95       	ror	r30
	uint8_t unidade = (tempo / 10) % 10;
 1a6:	98 01       	movw	r18, r16
 1a8:	ad ec       	ldi	r26, 0xCD	; 205
 1aa:	bc ec       	ldi	r27, 0xCC	; 204
 1ac:	0e 94 06 02 	call	0x40c	; 0x40c <__umulhisi3>
 1b0:	ac 01       	movw	r20, r24
 1b2:	56 95       	lsr	r21
 1b4:	47 95       	ror	r20
 1b6:	56 95       	lsr	r21
 1b8:	47 95       	ror	r20
 1ba:	56 95       	lsr	r21
 1bc:	47 95       	ror	r20
 1be:	9a 01       	movw	r18, r20
 1c0:	0e 94 06 02 	call	0x40c	; 0x40c <__umulhisi3>
 1c4:	ec 01       	movw	r28, r24
 1c6:	d6 95       	lsr	r29
 1c8:	c7 95       	ror	r28
 1ca:	d6 95       	lsr	r29
 1cc:	c7 95       	ror	r28
 1ce:	d6 95       	lsr	r29
 1d0:	c7 95       	ror	r28
 1d2:	ce 01       	movw	r24, r28
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	cc 0f       	add	r28, r28
 1da:	dd 1f       	adc	r29, r29
 1dc:	cc 0f       	add	r28, r28
 1de:	dd 1f       	adc	r29, r29
 1e0:	cc 0f       	add	r28, r28
 1e2:	dd 1f       	adc	r29, r29
 1e4:	c8 0f       	add	r28, r24
 1e6:	d9 1f       	adc	r29, r25
 1e8:	ca 01       	movw	r24, r20
 1ea:	8c 1b       	sub	r24, r28
 1ec:	9d 0b       	sbc	r25, r29
 1ee:	ec 01       	movw	r28, r24
	uint8_t dezenas = tempo % 10;
 1f0:	ca 01       	movw	r24, r20
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	44 0f       	add	r20, r20
 1f8:	55 1f       	adc	r21, r21
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	48 0f       	add	r20, r24
 204:	59 1f       	adc	r21, r25
 206:	04 1b       	sub	r16, r20
 208:	15 0b       	sbc	r17, r21
	
	display_Num(decimos);
 20a:	8e 2f       	mov	r24, r30
 20c:	0e 94 85 00 	call	0x10a	; 0x10a <display_Num>
	display_Num(unidade);
 210:	8c 2f       	mov	r24, r28
 212:	0e 94 85 00 	call	0x10a	; 0x10a <display_Num>
	display_Num(dezenas);
 216:	80 2f       	mov	r24, r16
 218:	0e 94 85 00 	call	0x10a	; 0x10a <display_Num>
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <Usart>:

// Função para configurar a USART
void Usart(uint16_t baud_rate) {
	uint16_t valor_ubbr = F_CPU / 16 / baud_rate - 1;	// Calculo do valor para o registrador UBRR
 226:	9c 01       	movw	r18, r24
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	60 e2       	ldi	r22, 0x20	; 32
 22e:	71 ea       	ldi	r23, 0xA1	; 161
 230:	87 e0       	ldi	r24, 0x07	; 7
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodsi4>
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	31 09       	sbc	r19, r1
	UBRR0H = (uint8_t)(valor_ubbr >> 8); // Valor mais significativo do UBRR 
 23c:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)valor_ubbr; // Valor menos significativo do UBRR
 240:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);	// Habilita a recepção, transmissão, a interrupção de recepção e transmissão da USART
 244:	88 e9       	ldi	r24, 0x98	; 152
 246:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (1 << USBS0); // Coloca para receber ou enviar ate 8 bits e 1 bit de parada
 24a:	8e e0       	ldi	r24, 0x0E	; 14
 24c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 250:	08 95       	ret

00000252 <__vector_11>:
}

// Interrupção para o temporizador TC1
ISR(TIMER1_COMPA_vect) {
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
		Tempo_Display(decimos); 
 274:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <decimos>
 278:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <decimos+0x1>
 27c:	0e 94 c2 00 	call	0x184	; 0x184 <Tempo_Display>
		decimos++;	// Incrementa o decimos
 280:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <decimos>
 284:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <decimos+0x1>
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <decimos+0x1>
 28e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <decimos>
		if (decimos >= 600) {	// Se o decimos chegar a 600ms(60s) 
 292:	88 35       	cpi	r24, 0x58	; 88
 294:	92 40       	sbci	r25, 0x02	; 2
 296:	70 f0       	brcs	.+28     	; 0x2b4 <__vector_11+0x62>
			contagem_ativa = 0;	// a contagem_ativa faz com que o comando C reconheça que a contagem parou
 298:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
			num_char = 0; 
 29c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <num_char>
			UCSR0B |= (1 << UDRIE0); // Habilita a interrupcao de transmissao
 2a0:	e1 ec       	ldi	r30, 0xC1	; 193
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	80 62       	ori	r24, 0x20	; 32
 2a8:	80 83       	st	Z, r24
			TIMSK1 &= ~(1 << OCIE1A );	// Desabilita a interrupção do contador
 2aa:	ef e6       	ldi	r30, 0x6F	; 111
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	8d 7f       	andi	r24, 0xFD	; 253
 2b2:	80 83       	st	Z, r24
		}
	
}
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_18>:

// Interrupção para a recpecao na Usart
ISR(USART_RX_vect) {
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	8f 93       	push	r24
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
	uint8_t comando = UDR0;	// Verifica se tem dados recebidos no reg UDR0 
 2e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (comando == 'I' || comando == 'i'){	// Recebe I ou i para iniciar a contagem
 2ea:	89 34       	cpi	r24, 0x49	; 73
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <__vector_18+0x1c>
 2ee:	89 36       	cpi	r24, 0x69	; 105
 2f0:	49 f4       	brne	.+18     	; 0x304 <__vector_18+0x2e>
	TIMSK1 |= (1 << OCIE1A); 
 2f2:	ef e6       	ldi	r30, 0x6F	; 111
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	80 83       	st	Z, r24
	contagem_ativa = 1;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 302:	1d c0       	rjmp	.+58     	; 0x33e <__vector_18+0x68>
	}
	else if (comando == 'P' || comando == 'p'){	// Recebe P ou p para parar a contagem
 304:	80 35       	cpi	r24, 0x50	; 80
 306:	11 f0       	breq	.+4      	; 0x30c <__vector_18+0x36>
 308:	80 37       	cpi	r24, 0x70	; 112
 30a:	41 f4       	brne	.+16     	; 0x31c <__vector_18+0x46>
	TIMSK1 &= ~(1 << OCIE1A); 
 30c:	ef e6       	ldi	r30, 0x6F	; 111
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	8d 7f       	andi	r24, 0xFD	; 253
 314:	80 83       	st	Z, r24
	contagem_ativa = 0;
 316:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 31a:	11 c0       	rjmp	.+34     	; 0x33e <__vector_18+0x68>
	}
	else if (comando == 'C' || comando == 'c') { // Recebe C ou c para resetar a contagem apenas quando estiver parada
 31c:	83 34       	cpi	r24, 0x43	; 67
 31e:	11 f0       	breq	.+4      	; 0x324 <__vector_18+0x4e>
 320:	83 36       	cpi	r24, 0x63	; 99
 322:	69 f4       	brne	.+26     	; 0x33e <__vector_18+0x68>
		if (!contagem_ativa) {
 324:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 328:	81 11       	cpse	r24, r1
 32a:	09 c0       	rjmp	.+18     	; 0x33e <__vector_18+0x68>
			TIMSK1 |= (1 << OCIE1A); 
 32c:	ef e6       	ldi	r30, 0x6F	; 111
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	82 60       	ori	r24, 0x02	; 2
 334:	80 83       	st	Z, r24
			decimos = 0;
 336:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <decimos+0x1>
 33a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <decimos>
		}
	}
}
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	8f 91       	pop	r24
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <__vector_19>:

// Interrupção para a transmissão de dados
ISR(USART_UDRE_vect) {
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	8f 93       	push	r24
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
	if (num_char <= 6) {
 35e:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <num_char>
 362:	e7 30       	cpi	r30, 0x07	; 7
 364:	60 f4       	brcc	.+24     	; 0x37e <__vector_19+0x30>
		UDR0 = carac_maximo[num_char];
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	e0 50       	subi	r30, 0x00	; 0
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	80 81       	ld	r24, Z
 36e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		num_char++;
 372:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <num_char>
 376:	8f 5f       	subi	r24, 0xFF	; 255
 378:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <num_char>
 37c:	05 c0       	rjmp	.+10     	; 0x388 <__vector_19+0x3a>
		} else {
		UCSR0B &= ~(1 << UDRIE0);// Desabilita a interrupção de transmissão da USART 
 37e:	e1 ec       	ldi	r30, 0xC1	; 193
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	8f 7d       	andi	r24, 0xDF	; 223
 386:	80 83       	st	Z, r24
	}
}
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	8f 91       	pop	r24
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <main>:

int main(void) {
	// Configuração dos registradores de deslocamento
	DDRB |= (1 << DATA_PIN) | (1 << LATCH_PIN) | (1 << CLOCK_PIN) ;
 398:	84 b1       	in	r24, 0x04	; 4
 39a:	87 60       	ori	r24, 0x07	; 7
 39c:	84 b9       	out	0x04, r24	; 4
	Tempo_Display(0);// Configura para quando iniciar o display inciar em 00,0
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 c2 00 	call	0x184	; 0x184 <Tempo_Display>

	Usart(9600); //Configuração da USART para 9600 bps
 3a6:	80 e8       	ldi	r24, 0x80	; 128
 3a8:	95 e2       	ldi	r25, 0x25	; 37
 3aa:	0e 94 13 01 	call	0x226	; 0x226 <Usart>

	// Configuração do temporizador TC1
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);// Modo CTC, prescaler de 1024
 3ae:	e1 e8       	ldi	r30, 0x81	; 129
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	8d 60       	ori	r24, 0x0D	; 13
 3b6:	80 83       	st	Z, r24
	OCR1A = 780; // Configura o valor do reg OCR1A para que cada pulso ocarra em 100 ms
 3b8:	8c e0       	ldi	r24, 0x0C	; 12
 3ba:	93 e0       	ldi	r25, 0x03	; 3
 3bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	sei();	// Habilita todas as interrupções
 3c4:	78 94       	sei
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <main+0x2e>

000003c8 <__udivmodsi4>:
 3c8:	a1 e2       	ldi	r26, 0x21	; 33
 3ca:	1a 2e       	mov	r1, r26
 3cc:	aa 1b       	sub	r26, r26
 3ce:	bb 1b       	sub	r27, r27
 3d0:	fd 01       	movw	r30, r26
 3d2:	0d c0       	rjmp	.+26     	; 0x3ee <__udivmodsi4_ep>

000003d4 <__udivmodsi4_loop>:
 3d4:	aa 1f       	adc	r26, r26
 3d6:	bb 1f       	adc	r27, r27
 3d8:	ee 1f       	adc	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	a2 17       	cp	r26, r18
 3de:	b3 07       	cpc	r27, r19
 3e0:	e4 07       	cpc	r30, r20
 3e2:	f5 07       	cpc	r31, r21
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__udivmodsi4_ep>
 3e6:	a2 1b       	sub	r26, r18
 3e8:	b3 0b       	sbc	r27, r19
 3ea:	e4 0b       	sbc	r30, r20
 3ec:	f5 0b       	sbc	r31, r21

000003ee <__udivmodsi4_ep>:
 3ee:	66 1f       	adc	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	88 1f       	adc	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	1a 94       	dec	r1
 3f8:	69 f7       	brne	.-38     	; 0x3d4 <__udivmodsi4_loop>
 3fa:	60 95       	com	r22
 3fc:	70 95       	com	r23
 3fe:	80 95       	com	r24
 400:	90 95       	com	r25
 402:	9b 01       	movw	r18, r22
 404:	ac 01       	movw	r20, r24
 406:	bd 01       	movw	r22, r26
 408:	cf 01       	movw	r24, r30
 40a:	08 95       	ret

0000040c <__umulhisi3>:
 40c:	a2 9f       	mul	r26, r18
 40e:	b0 01       	movw	r22, r0
 410:	b3 9f       	mul	r27, r19
 412:	c0 01       	movw	r24, r0
 414:	a3 9f       	mul	r26, r19
 416:	70 0d       	add	r23, r0
 418:	81 1d       	adc	r24, r1
 41a:	11 24       	eor	r1, r1
 41c:	91 1d       	adc	r25, r1
 41e:	b2 9f       	mul	r27, r18
 420:	70 0d       	add	r23, r0
 422:	81 1d       	adc	r24, r1
 424:	11 24       	eor	r1, r1
 426:	91 1d       	adc	r25, r1
 428:	08 95       	ret

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
